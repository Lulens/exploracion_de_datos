# Cargar las librerías necesarias
library(ggplot2)
# Leer y limpiar los datos
archive <- "C:/Users/Lucia Baez/Documents/UCA/Exploracion de Datos/Sleep Health/Sleep_health_and_lifestyle_dataset.csv"
data <- read.csv(archive, na.strings = c("", "NA", "NaN", "None"))
# Cargar las librerías necesarias
library(ggplot2)
# Definir las rutas relativas
dataset_path <- "data/Sleep_health_and_lifestyle_dataset.csv"
output_dir <- "outputs"
# Crear las carpetas necesarias si no existen
if (!dir.exists("data")) {
dir.create("data")
}
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Leer y limpiar los datos
data <- read.csv(dataset_path, na.strings = c("", "NA", "NaN", "None"))
data_clean <- na.omit(data)
# Guardar el archivo limpio
write.csv(data_clean, file.path(output_dir, "Sleep_health_and_lifestyle_dataset_clean.csv"), row.names = FALSE)
cat("Archivo limpio guardado con éxito.\n")
# Función para calcular métricas descriptivas para columnas numéricas
calc_metrics <- function(column) {
list(
Media = mean(column, na.rm = TRUE),
Mediana = median(column, na.rm = TRUE),
Minimo = min(column, na.rm = TRUE),
Maximo = max(column, na.rm = TRUE),
Rango = range(column, na.rm = TRUE)
)
}
# Aplicar la función a cada columna numérica
metrics_Age <- calc_metrics(data_clean$Age)
metrics_Sleep_Duration <- calc_metrics(data_clean$Sleep.Duration)
metrics_Stress_Level <- calc_metrics(data_clean$Stress.Level)
metrics_Heart_Rate <- calc_metrics(data_clean$Heart.Rate)
metrics_Daily_Steps <- calc_metrics(data_clean$Daily.Steps)
# Imprimir las métricas
cat("\nMétricas de Age:\n")
print(metrics_Age)
cat("\nMétricas de Sleep Duration:\n")
print(metrics_Sleep_Duration)
cat("\nMétricas de Stress Level:\n")
print(metrics_Stress_Level)
cat("\nMétricas de Heart Rate:\n")
print(metrics_Heart_Rate)
cat("\nMétricas de Daily Steps:\n")
print(metrics_Daily_Steps)
# Calcular frecuencias absolutas y relativas para una columna categórica, por ejemplo, Gender
abs_freq_gender <- table(data_clean$Gender)
cat("\nFrecuencia absoluta de Gender:\n")
print(abs_freq_gender)
rel_freq_gender <- abs_freq_gender / length(data_clean$Gender)
cat("\nFrecuencia relativa de Gender:\n")
print(rel_freq_gender)
# Ejemplo adicional para Sleep Disorder
abs_freq_sleep_disorder <- table(data_clean$Sleep.Disorder)
cat("\nFrecuencia absoluta de Sleep Disorder:\n")
print(abs_freq_sleep_disorder)
rel_freq_sleep_disorder <- abs_freq_sleep_disorder / length(data_clean$Sleep.Disorder)
cat("\nFrecuencia relativa de Sleep Disorder:\n")
print(rel_freq_sleep_disorder)
# Verificar y limpiar la columna Quality of Sleep
valid_values <- c(4, 5, 6, 7, 8, 9)
data_clean$Quality.of.Sleep <- ifelse(data_clean$Quality.of.Sleep %in% valid_values, data_clean$Quality.of.Sleep, NA)
data_clean$Quality.of.Sleep <- factor(data_clean$Quality.of.Sleep, levels = valid_values, labels = c("Poor", "Fair", "Good", "Very Good", "Excellent", NA))
data_clean$Quality.of.Sleep <- as.numeric(data_clean$Quality.of.Sleep)
cat("\nNúmero de valores NA en Quality.of.Sleep:\n")
sum(is.na(data_clean$Quality.of.Sleep))
# Calcular y graficar la ECDF para Quality of Sleep
if (sum(!is.na(data_clean$Quality.of.Sleep)) > 0) {
png(file.path(output_dir, "ECDF_Quality_of_Sleep.png"))
plot.ecdf(data_clean$Quality.of.Sleep, main="ECDF de Quality of Sleep", xlab="Quality of Sleep", ylab="ECDF")
dev.off()
cat("Gráfico ECDF de Quality of Sleep guardado como imagen.\n")
} else {
cat("Error: No hay valores válidos en Quality.of.Sleep para ECDF.\n")
}
# Calcular y graficar la ECDF para Sleep Duration
if (length(data_clean$Sleep.Duration[!is.na(data_clean$Sleep.Duration)]) > 0) {
png(file.path(output_dir, "ECDF_Sleep_Duration.png"))
plot.ecdf(data_clean$Sleep.Duration, main="ECDF de Sleep Duration", xlab="Sleep Duration", ylab="ECDF")
dev.off()
cat("Gráfico ECDF de Sleep Duration guardado como imagen.\n")
} else {
cat("Error: No hay valores válidos en Sleep.Duration para ECDF.\n")
}
# Graficar la ECDF para datos agrupados
grouped_data <- data.frame(
Intervalo = c("(0, 10]", "(10, 15]", "(15, 20]", "(20, 25]", "(25, 30]", "(30, 35]", "(35, 40]", "(40, 45]", "(45, 50]", "(50, 55]"),
Frecuencia = c(10, 3, 21, 75, 215, 373, 350, 171, 52, 6)
)
total_observaciones <- sum(grouped_data$Frecuencia)
grouped_data$Frecuencia.Relativa <- grouped_data$Frecuencia / total_observaciones
grouped_data$Frecuencia.Acumulada <- cumsum(grouped_data$Frecuencia.Relativa)
ecdf_data <- data.frame(
Límite.Superior = as.numeric(gsub("\\((.*),.*\\]", "\\1", grouped_data$Intervalo)),
Frecuencia.Acumulada = grouped_data$Frecuencia.Acumulada
)
ecdf_plot <- ggplot(ecdf_data, aes(x = Límite.Superior, y = Frecuencia.Acumulada)) +
geom_step() +
labs(title = "ECDF para Datos Agrupados", x = "Intervalos", y = "Frecuencia Acumulada") +
theme_minimal()
ggsave(file.path(output_dir, "ECDF_Datos_Agrupados.png"), plot = ecdf_plot)
# Gráficos de barras para variables categóricas
gender_freq_df <- as.data.frame(table(data_clean$Gender))
gender_bar_plot <- ggplot(gender_freq_df, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity") +
labs(title = "Frecuencia Absoluta de Gender", x = "Gender", y = "Frecuencia Absoluta") +
theme_minimal()
ggsave(file.path(output_dir, "Frecuencia_Absoluta_Gender.png"), plot = gender_bar_plot)
gender_bar_plot_rel <- ggplot(gender_freq_df, aes(x = Var1, y = Freq / sum(Freq))) +
geom_bar(stat = "identity") +
labs(title = "Frecuencia Relativa de Gender", x = "Gender", y = "Frecuencia Relativa") +
theme_minimal()
ggsave(file.path(output_dir, "Frecuencia_Relativa_Gender.png"), plot = gender_bar_plot_rel)
# Gráfico de Pie para Gender
gender_pie_plot <- ggplot(gender_freq_df, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
labs(title = "Distribución de Gender") +
theme_void()
ggsave(file.path(output_dir, "Pie_Chart_Gender.png"), plot = gender_pie_plot)
# Histogramas y gráficos de densidad
histogram_sleep_duration <- ggplot(data_clean, aes(x = Sleep.Duration)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Histograma de Sleep Duration", x = "Sleep Duration (horas)", y = "Frecuencia") +
theme_minimal()
ggsave(file.path(output_dir, "Histograma_Sleep_Duration.png"), plot = histogram_sleep_duration)
# Leer y limpiar los datos
archive <- "./Sleep Health/Sleep_health_and_lifestyle_dataset.csv"  # Ruta relativa
data <- read.csv(archive, na.strings = c("", "NA", "NaN", "None"))
# Leer y limpiar los datos
archive <- "../Sleep Health/Sleep_health_and_lifestyle_dataset.csv"
data <- read.csv(archive, na.strings = c("", "NA", "NaN", "None"))
